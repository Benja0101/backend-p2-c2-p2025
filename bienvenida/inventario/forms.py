# üìù FORMULARIOS DE LA APLICACI√ìN INVENTARIO
# Este archivo define los formularios para capturar y validar datos de usuario

from django import forms
from .models import Productos

# üìã Formulario para productos basado en el modelo Productos
class ProductoForm(forms.ModelForm):
    """
    Formulario autom√°tico generado desde el modelo Productos
    - Incluye validaci√≥n autom√°tica de tipos de datos
    - Genera campos HTML apropiados para cada tipo de campo
    - Maneja la creaci√≥n y edici√≥n de productos
    """
    
    class Meta:
        # üéØ Modelo base para el formulario
        model = Productos
        
        # üìù Campos que se incluir√°n en el formulario
        # Se corresponden con los campos del modelo Productos
        fields = ['nombre', 'descripcion', 'precio', 'stock']
        
        # üé® OPCIONAL: Se pueden agregar widgets personalizados
        # widgets = {
        #     'nombre': forms.TextInput(attrs={'class': 'form-control'}),
        #     'descripcion': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        #     'precio': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),
        #     'stock': forms.NumberInput(attrs={'class': 'form-control'}),
        # }
        
        # üè∑Ô∏è OPCIONAL: Etiquetas personalizadas para los campos
        # labels = {
        #     'nombre': 'Nombre del Producto',
        #     'descripcion': 'Descripci√≥n Detallada',
        #     'precio': 'Precio (‚Ç¨)',
        #     'stock': 'Cantidad en Stock',
        # }

# üìù NOTA: Django autom√°ticamente:
# - Valida que los campos requeridos no est√©n vac√≠os
# - Verifica que el precio sea un n√∫mero decimal v√°lido
# - Confirma que el stock sea un n√∫mero entero
# - Genera HTML apropiado para cada tipo de campo